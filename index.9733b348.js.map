{"mappings":"gfAAAA,EAAA,S,WCAA,IAAAC,EAAAD,EAAA,S,aAGME,EAAaC,SAASC,cAAc,iBACpCC,EAAcF,SAASC,cAAc,mBACrCE,EAAW,IAAI,EAAAL,EAAAM,SAmBrB,SAASC,EAAaC,GACpB,IAsBMC,EAAUD,EAAQE,KAtBT,SAAAC,IACb,EAAAC,EAAAC,gBAAeF,GACf,IAAMG,EAAUH,EAAII,GACdC,EAAaL,EAAIM,MACjBC,EAAOP,EAAIQ,cAAgB,GAG7BC,EAAW,GAOf,OALEA,EADET,EAAIU,YACK,GAAcC,OAJV,oCAI0BA,OAAhBX,EAAIU,aAElB,WAGN,8CAC2CC,OAAnCR,EAAQ,6BAA6CQ,OAAlBF,EAAS,WAE7BE,OAFsCN,EAAW,4CAGlDM,OADCN,EAAW,0CACaM,QAAzB,EAAAV,EAAAC,gBAAeF,GAAK,OAAsBW,OAAjBJ,EAAKK,MAAM,EAAG,GAAG,oB,IAIrCC,KAAK,IACzCvB,EAAWwB,mBAAmB,YAAahB,E,CA1C7CL,EAAYsB,iBAAiB,UAO7B,SAA6BC,GAC3BA,EAAEC,iBACFC,QAAQC,IAAIH,EAAEI,cAAcC,SAASC,MAAMC,OAC3C7B,EAAS4B,MAAQN,EAAEI,cAAcC,SAASC,MAAMC,MAChD7B,EAAS8B,YAqCTlC,EAAWmC,UAAY,GAnCvB/B,EAASgC,sBAAsBC,MAAK,SAAAC,GAClCV,QAAQC,IAAIS,EAAK/B,SACjBD,EAAagC,EAAK/B,Q,OAdtBH,EAASmC,kBAAkBF,MAAK,SAAAC,G,OAAQhC,EAAagC,EAAK/B,Q,IAC1DH,EAASoC,cAAcH,MAAK,SAAAC,GA0C5B,IAAsBG,EAzCpBb,QAAQC,IAAIS,GAyCQG,EAxCPH,EAAKG,OAyClBC,aAAaC,QAAQ,gBAAiBC,KAAKC,UAAUJ,G","sources":["src/index.js","src/js/movieMarkup.js"],"sourcesContent":["import './js/preloader';\nimport './js/fetchApi';\nimport './js/movieMarkup';\nimport './js/checkGenres';\nimport './js/modalMovie';\n","import MovieApi from './fetchApi';\nimport { checkGenreByID } from './checkGenres';\n\nconst listMovies = document.querySelector('.js-home-main');\nconst searchMovie = document.querySelector('.js-search-form');\nconst movieApi = new MovieApi();\nsearchMovie.addEventListener('submit', searchMovieForQuery);\nmovieApi.fetchMoviesWeek().then(data => createMarkup(data.results));\nmovieApi.fetchGeners().then(data => {\n  console.log(data);\n  genresMovies(data.genres);\n});\n\nfunction searchMovieForQuery(e) {\n  e.preventDefault();\n  console.log(e.currentTarget.elements.query.value);\n  movieApi.query = e.currentTarget.elements.query.value;\n  movieApi.resetPage();\n  clearPage();\n  movieApi.fetchMoviesForQuery().then(data => {\n    console.log(data.results);\n    createMarkup(data.results);\n  });\n}\nfunction createMarkup(results) {\n  const markup = obj => {\n    checkGenreByID(obj);\n    const movieId = obj.id;\n    const movieTitle = obj.title;\n    const year = obj.release_date || '';\n    const imageUrl = 'https://image.tmdb.org/t/p/w500/';\n\n    let imageSrc = '';\n    if (obj.poster_path) {\n      imageSrc = `${imageUrl}${obj.poster_path}`;\n    } else {\n      imageSrc = 'no_image';\n    }\n\n    return `<li class=\"item-movies\">\n        <img id=\"${movieId}\" class=\"img-movie\" src=\"${imageSrc}\" alt=\"${movieTitle}\" />\n\n        <h2 class=\"title-movie\">${movieTitle}</h2>\n        <p class=\"genre-movie\">${checkGenreByID(obj)} | ${year.slice(0, 4)}</p>\n      </li>`;\n  };\n\n  const markups = results.map(markup).join('');\n  listMovies.insertAdjacentHTML('beforeend', markups);\n}\nfunction genresMovies(genres) {\n  localStorage.setItem('GENRES-MOVIES', JSON.stringify(genres));\n}\nfunction clearPage() {\n  listMovies.innerHTML = '';\n}\n"],"names":["parcelRequire","$sRYpV","$906e66e38a3148c7$var$listMovies","document","querySelector","$906e66e38a3148c7$var$searchMovie","$906e66e38a3148c7$var$movieApi","default","$906e66e38a3148c7$var$createMarkup","results","markups","map","obj","$eOsHY","checkGenreByID","movieId","id","movieTitle","title","year","release_date","imageSrc","poster_path","concat","slice","join","insertAdjacentHTML","addEventListener","e","preventDefault","console","log","currentTarget","elements","query","value","resetPage","innerHTML","fetchMoviesForQuery","then","data","fetchMoviesWeek","fetchGeners","genres","localStorage","setItem","JSON","stringify"],"version":3,"file":"index.9733b348.js.map"}